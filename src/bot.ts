import { Telegraf, Context } from 'telegraf';
import { PrismaClient, MessageType, Prisma } from '@prisma/client';
import dotenv from 'dotenv';
import express from 'express';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);
const prisma = new PrismaClient();
const app = express();

// Middleware –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
  if (ctx.from) {
    try {
      const user = await prisma.user.upsert({
        where: { telegramId: BigInt(ctx.from.id) },
        update: {
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          languageCode: ctx.from.language_code,
        },
        create: {
          telegramId: BigInt(ctx.from.id),
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
          languageCode: ctx.from.language_code,
          isBot: ctx.from.is_bot,
        },
      });

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
      if (ctx.message) {
        let messageType: MessageType = MessageType.TEXT;
        if ('text' in ctx.message && ctx.message.text?.startsWith('/')) {
          messageType = MessageType.COMMAND;
        } else if (ctx.callbackQuery) {
          messageType = MessageType.CALLBACK_QUERY;
        }

        await prisma.message.create({
          data: {
            userId: user.id,
            messageId: ctx.message.message_id,
            text: 'text' in ctx.message ? ctx.message.text : null,
            type: messageType,
            // –£–ø—Ä–æ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
            data: {
              message_id: ctx.message.message_id,
              date: ctx.message.date,
              chat: { id: ctx.message.chat.id, type: ctx.message.chat.type }
            } as Prisma.InputJsonValue,
          },
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }
  return next();
});

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('start', async (ctx) => {
  const welcomeMessage = `
üëã –≠–π, –π–æ—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Total Lookas! –ú—ã —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã–π –º–µ—Ä—á –∏ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±–µ!

–í—Å—ë –ø—Ä–æ—Å—Ç–æ:
1. –ù–∞–∂–º–∏ ¬´–ù–ê–ß–ê–¢–¨¬ª
2. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
3. –£–∫–∞–∂–∏ —Ç–∏—Ä–∞–∂
4. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ –ö–ü
  `;

  await ctx.reply(welcomeMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', callback_data: 'open_app' }],
        [
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' },
          { text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }
        ]
      ]
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ webapp
bot.command('webapp', async (ctx) => {
  const webAppUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://your-webapp-url.com';
  
  await ctx.reply('üõçÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:', {
    reply_markup: {
      inline_keyboard: [
        [{
          text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
          web_app: { url: webAppUrl }
        }]
      ]
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ help
bot.command('help', async (ctx) => {
  const helpMessage = `
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Total Lookas

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /webapp - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ /contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webapp –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
4. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @totallookas
  `;

  await ctx.reply(helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ contacts
bot.command('contacts', async (ctx) => {
  const contactsMessage = `
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã Total Lookas

üè¢ –ê–¥—Ä–µ—Å: –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –°–∏–±–∏—Ä—Å–∫–∏–π –¢—Ä–∞–∫—Ç, 78, –ö–∞–∑–∞–Ω—å–æ—Ñ–∏—Å 301
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 162-77-58
üìß Email: info@totallookas.com
üåê –°–∞–π—Ç: totallookas.com
üí¨ Telegram: @totallookas

ÔøΩ –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: @zelenayaaliya

ÔøΩüïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω—ã–µ
  `;

  await ctx.reply(contactsMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ ping –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.command('ping', async (ctx) => {
  await ctx.reply('pong');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.action('open_app', async (ctx) => {
  const webAppUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://your-webapp-url.com';
  
  await ctx.answerCbQuery();
  await ctx.reply('üõçÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤...', {
    reply_markup: {
      inline_keyboard: [
        [{
          text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
          web_app: { url: webAppUrl }
        }]
      ]
    }
  });
});

bot.action('contacts', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithHTML(`
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã Total Lookas</b>

üè¢ –ê–¥—Ä–µ—Å: –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –°–∏–±–∏—Ä—Å–∫–∏–π –¢—Ä–∞–∫—Ç, 78, –ö–∞–∑–∞–Ω—å–æ—Ñ–∏—Å 301
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 162-77-58
üìß Email: info@totallookas.com
üåê –°–∞–π—Ç: totallookas.com
üí¨ Telegram: @totallookas

üí¨ <b>–í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä:</b> @zelenayaaliya

üïí <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±-–í—Å: –≤—ã—Ö–æ–¥–Ω—ã–µ
  `);
});

bot.action('about', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.replyWithHTML(`
‚ÑπÔ∏è <b>–û –∫–æ–º–ø–∞–Ω–∏–∏ Total Lookas</b>

üéØ –ú—ã —Å–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ä—á –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!

‚ú® <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>
‚Ä¢ –§–∏—Ä–º–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞
‚Ä¢ –°—É–≤–µ–Ω–∏—Ä–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
‚Ä¢ –ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –¥–∏–∑–∞–π–Ω
‚Ä¢ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞

üöÄ <b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:</b>
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üí° –°–¥–µ–ª–∞–µ–º –≤–∞—à –±—Ä–µ–Ω–¥ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è!
  `);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebApp –¥–∞–Ω–Ω—ã—Ö
bot.on('web_app_data', async (ctx) => {
  try {
    const msg: any = ctx.message;
    const webAppDataStr: string | undefined = msg?.web_app_data?.data;
    if (!webAppDataStr) {
      throw new Error('web_app_data.data is empty');
    }
    const parsedData = JSON.parse(webAppDataStr);

    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(ctx.from!.id) }
    });

    if (user) {
      await prisma.webAppData.create({
        data: {
          userId: user.id,
          data: parsedData,
          type: 'order'
        }
      });

      if (process.env.ADMIN_CHAT_ID) {
        await bot.telegram.sendMessage(
          process.env.ADMIN_CHAT_ID,
          `üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${ctx.from!.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}\n\n${JSON.stringify(parsedData, null, 2)}`
        );
      }

      await ctx.reply('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω! –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  console.error('Context:', ctx.updateType, ctx.update);
  try {
    ctx.reply('üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  } catch (replyError) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
  }
});

// Health check endpoint
app.get('/health', (req: any, res: any) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async function startBot() {
  try {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...');
    
    console.log('ÔøΩ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('DATABASE_URL:', process.env.DATABASE_URL?.substring(0, 50) + '...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
    const healthPort = process.env.HEALTH_PORT || 3001;
    app.listen(healthPort, () => {
      console.log(`üè• Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${healthPort}`);
    });

    // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã —á–µ—Ä–µ–∑ long polling
    await bot.telegram.deleteWebhook({ drop_pending_updates: true }).catch((e) => {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):', e?.message || e);
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    const me = await bot.telegram.getMe();
    console.log(`ü§ñ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @${me.username} (id: ${me.id})`);

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log('üöÄ Telegram –±–æ—Ç Total Lookas –∑–∞–ø—É—â–µ–Ω!');

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ADMIN_CHAT_ID
    if (process.env.ADMIN_CHAT_ID) {
      try {
        await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, '‚úÖ Bot started and is online');
        console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (e) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', (e as any)?.message || e);
      }
    }

    // Graceful shutdown
    process.once('SIGINT', () => {
      console.log('‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      bot.stop('SIGINT');
      prisma.$disconnect();
    });
    
    process.once('SIGTERM', () => {
      console.log('‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      bot.stop('SIGTERM');
      prisma.$disconnect();
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:');
    console.error('Error name:', (error as any)?.name);
    console.error('Error message:', (error as any)?.message);
    console.error('Error stack:', (error as any)?.stack);
    
    if ((error as any)?.code) {
      console.error('Error code:', (error as any)?.code);
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startBot();
